// Generated by CoffeeScript 1.7.1
(function() {
  window.tempComments = [
    {
      "text": "early comment",
      "created_at": "2014-04-10T18:56:02.796132",
      "parent_id": "",
      "video": "fleet_week",
      "user": {
        "username": "testuser",
        "userID": "12dfeg92345301xsdfj",
        "img": "http://www.gravatar.com/avatar/705a657e42d328a1eaac27fbd83eeda2?s=200&r=r"
      },
      "timestamp": "fleet_week/19.86303",
      "_id": {
        "$oid": "534b04b5074fb2b003e30879"
      },
      "display": "true",
      "discussion_id": ""
    }
  ];

  window.stage;

  window.toggleSubtitles = function() {
    if ($('#toggleSubtitles').hasClass('on')) {
      $('#toggleSubtitles').removeClass('on');
      $('#subtitle-container').hide();
    } else {
      $('#toggleSubtitles').addClass('on');
      $('#subtitle-container').show();
    }
    return maintainAspectRatio();
  };

  window.toggleComments = function() {
    if ($('#toggleComments').hasClass('on')) {
      $('#toggleComments').removeClass('on');
      $('#stage').css('bottom', 50);
      $('#controls').css('bottom', 0);
      $('#comment-container').hide();
    } else {
      $('#toggleComments').addClass('on');
      $('#stage').css('bottom', 110);
      $('#controls').css('bottom', 60);
      $('#comment-container').show();
    }
    return maintainAspectRatio();
  };

  window.maintainAspectRatio = function() {
    var availableHeight, availableWidth, commentHeight, controlsHeight, newHeight, newWidth, subtitleHeight;
    console.log('maintain');
    commentHeight = $('#toggleComments').hasClass('on') ? 60 : 0;
    subtitleHeight = $('#toggleSubtitles').hasClass('on') ? 60 : 0;
    controlsHeight = 50;
    availableHeight = $('#player-wrapper').height() - commentHeight - subtitleHeight - controlsHeight;
    availableWidth = $('#player-wrapper').width();
    $('#stage').css('bottom', commentHeight + subtitleHeight + controlsHeight);
    newWidth = (availableWidth / availableHeight) >= 16 / 9 ? Math.round(availableHeight * (16 / 9)) : availableWidth;
    newHeight = (availableWidth / availableHeight) >= 16 / 9 ? availableHeight : Math.round(availableWidth * (9 / 16));
    if (newWidth < availableWidth) {
      $('#stage').css('left', .5 * (availableWidth - newWidth));
    } else {
      $('#stage').css('left', 0);
    }
    $('#stage').css('height', newHeight);
    return $('#stage').css('width', newWidth);
  };

  window.toggleVolume = function() {
    video_playing.toggleMute();
    if (video_playing.muted === true) {
      return $("#slider-vertical").slider({
        value: 0
      });
    } else {
      return $("#slider-vertical").slider({
        value: 100
      });
    }
  };

  window.draw = function(comments, stage) {
    var canvas, canvasWidth, comment, line, percentAcrossCanvas, _i, _len;
    console.log("draw");
    stage.autoClear = true;
    stage.removeAllChildren();
    canvas = document.getElementById('comment-timeline-canvas');
    canvas.width = $('#comment-timeline-canvas-container').width();
    canvas.height = $('#comment-timeline-canvas-container').height();
    for (_i = 0, _len = comments.length; _i < _len; _i++) {
      comment = comments[_i];
      console.log("drawing comment");
      canvasWidth = document.getElementById('comment-timeline-canvas').width;
      console.log(canvasWidth);
      percentAcrossCanvas = (timelineURItoX(comment['timestamp']) * canvasWidth / 100).toPrecision(2);
      line = new createjs.Shape();
      console.log(line);
      line.graphics.beginFill("3d3d3d").drawRect(percentAcrossCanvas, 0, 2, canvasWidth);
      stage.addChild(line);
    }
    return stage.update();
  };

  window.timelineURItoX = function(uri) {
    var time;
    time = uri.split('/')[1];
    return (time / timeline.totalDuration) * 100;
  };

  window.resizeCommentCanvas = function(tempComments, stage) {
    return draw(tempComments, stage);
  };

  $(function() {
    var reportOnDeck, timeline;
    window.maintainAspectRatio();
    $(window).resize(function() {
      console.log('resize');
      window.maintainAspectRatio();
      return window.resizeCommentCanvas(tempComments, stage);
    });
    window.sceneController = new lessonplan.SceneController(sceneList);
    timeline = new lessonplan.Timeline('#timeline-controls', window.sceneController);
    if ((window.showSubtitles != null) && window.showSubtitles) {
      window.toggleSubtitles();
    }
    console.log("~~~~~~~~~ REPORT ON DECK ~~~~~~~~~~~~~");
    reportOnDeck = function(ondecks) {
      return console.log(ondecks);
    };
    timeline.onNewOnDeckURIs(reportOnDeck);
    window.timeline = timeline;
    $('#input-field').focus(function() {
      if (this.value === this.defaultValue) {
        this.value = '';
        return $(this).removeClass('inputDefault');
      }
    }).blur(function() {
      if (this.value === '') {
        this.value = this.defaultValue;
        return $(this).addClass('inputDefault');
      }
    }).keypress(function(e) {
      if (e.which === 13) {
        return submitInput();
      }
    });
    $("#slider-vertical").slider({
      orientation: "vertical",
      range: "min",
      min: 0,
      max: 100,
      value: 95,
      slide: function(event, ui) {
        return video_playing.changeVolume(ui.value / 100);
      }
    });
    $(".icon-volume-down").on({
      mouseenter: function() {
        return $(".ui-slider-vertical").show();
      },
      mouseleave: function() {
        return $(".ui-slider-vertical").hide();
      }
    });
    $(".ui-slider-vertical").on({
      mouseenter: function() {
        return $(".ui-slider-vertical").show();
      },
      mouseleave: function() {
        return $(".ui-slider-vertical").hide();
      }
    });
    $(".ui-slider-vertical").hide();
    window.stage = new createjs.Stage("comment-timeline-canvas");
    window.stage.on("stagemousedown", function(evt) {
      var canvasWidth;
      console.log("clicked stage");
      canvasWidth = document.getElementById('comment-timeline-canvas').width;
      return timeline.seekDirectToX(evt.stageX.toPrecision(2), canvasWidth);
    });
    draw(window.tempComments, window.stage);
    return setTimeout(function() {
      return draw(window.tempComments, window.stage);
    }, 2000);
  });

}).call(this);
